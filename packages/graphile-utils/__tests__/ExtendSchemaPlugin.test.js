import { ExtendSchemaPlugin, gql } from "../src";
import {
  buildSchema,
  // defaultPlugins,
  StandardTypesPlugin,
  QueryPlugin,
  MutationPlugin,
  MutationPayloadQueryPlugin,
} from "graphile-build";
import { graphql, printSchema } from "graphql";

const simplePlugins = [
  StandardTypesPlugin,
  QueryPlugin,
  MutationPlugin,
  MutationPayloadQueryPlugin,
];

const resolvers = {
  Query: {
    randomNumber(_query, _args, _context, _info) {
      return 4; // chosen by fair dice roll. guaranteed to be random. xkcd#221
    },
    randomNumbers() {
      return [5, 3, 6];
    },
    echo(_query, args) {
      return args.input;
    },
  },
};

it("allows adding a simple type", async () => {
  const schema = await buildSchema([
    ...simplePlugins,
    ExtendSchemaPlugin(_build => ({
      typeDefs: gql`
        extend type Query {
          """
          A random number generated by a fair dice roll.
          """
          randomNumber: Int
        }
      `,
      resolvers,
    })),
  ]);
  const printedSchema = printSchema(schema);
  expect(printedSchema).toMatchSnapshot();
  const { data } = await graphql(
    schema,
    `
      {
        randomNumber
      }
    `
  );
  expect(data.randomNumber).toEqual(4);
});

it("allows adding a non-null type", async () => {
  const schema = await buildSchema([
    ...simplePlugins,
    ExtendSchemaPlugin(_build => ({
      typeDefs: gql`
        extend type Query {
          """
          A random number generated by a fair dice roll.
          """
          randomNumber: Int!
        }
      `,
      resolvers,
    })),
  ]);
  const printedSchema = printSchema(schema);
  expect(printedSchema).toMatchSnapshot();
  const { data } = await graphql(
    schema,
    `
      {
        randomNumber
      }
    `
  );
  expect(data.randomNumber).toEqual(4);
});

it("allows adding a non-null list of non-null type", async () => {
  const schema = await buildSchema([
    ...simplePlugins,
    ExtendSchemaPlugin(_build => ({
      typeDefs: gql`
        extend type Query {
          """
          Gives a list of numbers that were randomly generated by fair dice roll
          """
          randomNumbers: [Int!]!
        }
      `,
      resolvers,
    })),
  ]);
  const printedSchema = printSchema(schema);
  expect(printedSchema).toMatchSnapshot();
  const { data } = await graphql(
    schema,
    `
      {
        randomNumbers
      }
    `
  );
  expect(data.randomNumbers).toEqual([5, 3, 6]);
});

it("allows adding a field with arguments", async () => {
  const schema = await buildSchema([
    ...simplePlugins,
    ExtendSchemaPlugin(_build => ({
      typeDefs: gql`
        extend type Query {
          """
          Gives you back what you put in
          """
          echo(input: [Int!]!): [Int!]!
        }
      `,
      resolvers,
    })),
  ]);
  const printedSchema = printSchema(schema);
  expect(printedSchema).toMatchSnapshot();
  const { data } = await graphql(
    schema,
    `
      {
        echo(input: [1, 1, 2, 3, 5, 8])
      }
    `
  );
  expect(data.echo).toEqual([1, 1, 2, 3, 5, 8]);
});
