// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`allows adding a custom field returning a list to PG schema 1`] = `
"type Complex {
  numberInt: Int
  stringText: String
}

\\"\\"\\"An input for mutations affecting \`Complex\`\\"\\"\\"
input ComplexInput {
  numberInt: Int
  stringText: String
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
\\"\\"\\"
scalar Datetime

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"Reads and enables pagination through a set of \`User\`.\\"\\"\\"
  allUsers(
    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"The method to use when ordering \`User\`.\\"\\"\\"
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: UserCondition
  ): UsersConnection
  userById(id: Int!): User

  \\"\\"\\"Reads a single \`User\` using its globally unique \`ID\`.\\"\\"\\"
  user(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`User\`.\\"\\"\\"
    nodeId: ID!
  ): User
  randomUsers: [User!]
}

type User implements Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  id: Int!
  name: String!
  email: String!
  bio: String
  renamedComplexColumn: [Complex]
  createdAt: Datetime!
}

\\"\\"\\"
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input UserCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`email\` field.\\"\\"\\"
  email: String

  \\"\\"\\"Checks for equality with the object’s \`bio\` field.\\"\\"\\"
  bio: String

  \\"\\"\\"Checks for equality with the object’s \`renamedComplexColumn\` field.\\"\\"\\"
  renamedComplexColumn: [ComplexInput]

  \\"\\"\\"Checks for equality with the object’s \`createdAt\` field.\\"\\"\\"
  createdAt: Datetime
}

\\"\\"\\"A connection to a list of \`User\` values.\\"\\"\\"
type UsersConnection {
  \\"\\"\\"A list of \`User\` objects.\\"\\"\\"
  nodes: [User]!

  \\"\\"\\"
  A list of edges which contains the \`User\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UsersEdge!]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`User\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`User\` edge in the connection.\\"\\"\\"
type UsersEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`User\` at the end of the edge.\\"\\"\\"
  node: User
}

\\"\\"\\"Methods to use when ordering \`User\`.\\"\\"\\"
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  BIO_ASC
  BIO_DESC
  RENAMED_COMPLEX_COLUMN_ASC
  RENAMED_COMPLEX_COLUMN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
"
`;

exports[`allows adding a custom single field to PG schema 1`] = `
"type Complex {
  numberInt: Int
  stringText: String
}

\\"\\"\\"An input for mutations affecting \`Complex\`\\"\\"\\"
input ComplexInput {
  numberInt: Int
  stringText: String
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
\\"\\"\\"
scalar Datetime

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"Reads and enables pagination through a set of \`User\`.\\"\\"\\"
  allUsers(
    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"The method to use when ordering \`User\`.\\"\\"\\"
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: UserCondition
  ): UsersConnection
  userById(id: Int!): User

  \\"\\"\\"Reads a single \`User\` using its globally unique \`ID\`.\\"\\"\\"
  user(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`User\`.\\"\\"\\"
    nodeId: ID!
  ): User
  randomUser: User
}

type User implements Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  id: Int!
  name: String!
  email: String!
  bio: String
  renamedComplexColumn: [Complex]
  createdAt: Datetime!
}

\\"\\"\\"
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input UserCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`email\` field.\\"\\"\\"
  email: String

  \\"\\"\\"Checks for equality with the object’s \`bio\` field.\\"\\"\\"
  bio: String

  \\"\\"\\"Checks for equality with the object’s \`renamedComplexColumn\` field.\\"\\"\\"
  renamedComplexColumn: [ComplexInput]

  \\"\\"\\"Checks for equality with the object’s \`createdAt\` field.\\"\\"\\"
  createdAt: Datetime
}

\\"\\"\\"A connection to a list of \`User\` values.\\"\\"\\"
type UsersConnection {
  \\"\\"\\"A list of \`User\` objects.\\"\\"\\"
  nodes: [User]!

  \\"\\"\\"
  A list of edges which contains the \`User\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UsersEdge!]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`User\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`User\` edge in the connection.\\"\\"\\"
type UsersEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`User\` at the end of the edge.\\"\\"\\"
  node: User
}

\\"\\"\\"Methods to use when ordering \`User\`.\\"\\"\\"
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  BIO_ASC
  BIO_DESC
  RENAMED_COMPLEX_COLUMN_ASC
  RENAMED_COMPLEX_COLUMN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
"
`;

exports[`allows adding a field to an existing table, and requesting necessary data along with it 1`] = `
"type Complex {
  numberInt: Int
  stringText: String
}

\\"\\"\\"An input for mutations affecting \`Complex\`\\"\\"\\"
input ComplexInput {
  numberInt: Int
  stringText: String
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
\\"\\"\\"
scalar Datetime

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"Reads and enables pagination through a set of \`User\`.\\"\\"\\"
  allUsers(
    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"The method to use when ordering \`User\`.\\"\\"\\"
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: UserCondition
  ): UsersConnection
  userById(id: Int!): User

  \\"\\"\\"Reads a single \`User\` using its globally unique \`ID\`.\\"\\"\\"
  user(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`User\`.\\"\\"\\"
    nodeId: ID!
  ): User
}

type User implements Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  id: Int!
  name: String!
  email: String!
  bio: String
  renamedComplexColumn: [Complex]
  createdAt: Datetime!
  customField: String
}

\\"\\"\\"
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input UserCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`email\` field.\\"\\"\\"
  email: String

  \\"\\"\\"Checks for equality with the object’s \`bio\` field.\\"\\"\\"
  bio: String

  \\"\\"\\"Checks for equality with the object’s \`renamedComplexColumn\` field.\\"\\"\\"
  renamedComplexColumn: [ComplexInput]

  \\"\\"\\"Checks for equality with the object’s \`createdAt\` field.\\"\\"\\"
  createdAt: Datetime
}

\\"\\"\\"A connection to a list of \`User\` values.\\"\\"\\"
type UsersConnection {
  \\"\\"\\"A list of \`User\` objects.\\"\\"\\"
  nodes: [User]!

  \\"\\"\\"
  A list of edges which contains the \`User\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UsersEdge!]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`User\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`User\` edge in the connection.\\"\\"\\"
type UsersEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`User\` at the end of the edge.\\"\\"\\"
  node: User
}

\\"\\"\\"Methods to use when ordering \`User\`.\\"\\"\\"
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  BIO_ASC
  BIO_DESC
  RENAMED_COMPLEX_COLUMN_ASC
  RENAMED_COMPLEX_COLUMN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
"
`;

exports[`allows adding a simple mutation field to PG schema 1`] = `
"type Complex {
  numberInt: Int
  stringText: String
}

\\"\\"\\"An input for mutations affecting \`Complex\`\\"\\"\\"
input ComplexInput {
  numberInt: Int
  stringText: String
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
\\"\\"\\"
scalar Datetime

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  registerUser(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: RegisterUserInput!
  ): RegisterUserPayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"Reads and enables pagination through a set of \`User\`.\\"\\"\\"
  allUsers(
    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"The method to use when ordering \`User\`.\\"\\"\\"
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: UserCondition
  ): UsersConnection
  userById(id: Int!): User

  \\"\\"\\"Reads a single \`User\` using its globally unique \`ID\`.\\"\\"\\"
  user(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`User\`.\\"\\"\\"
    nodeId: ID!
  ): User
}

input RegisterUserInput {
  name: String!
  email: String!
  bio: String
}

type RegisterUserPayload {
  user: User
}

type User implements Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  id: Int!
  name: String!
  email: String!
  bio: String
  renamedComplexColumn: [Complex]
  createdAt: Datetime!
}

\\"\\"\\"
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input UserCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`email\` field.\\"\\"\\"
  email: String

  \\"\\"\\"Checks for equality with the object’s \`bio\` field.\\"\\"\\"
  bio: String

  \\"\\"\\"Checks for equality with the object’s \`renamedComplexColumn\` field.\\"\\"\\"
  renamedComplexColumn: [ComplexInput]

  \\"\\"\\"Checks for equality with the object’s \`createdAt\` field.\\"\\"\\"
  createdAt: Datetime
}

\\"\\"\\"A connection to a list of \`User\` values.\\"\\"\\"
type UsersConnection {
  \\"\\"\\"A list of \`User\` objects.\\"\\"\\"
  nodes: [User]!

  \\"\\"\\"
  A list of edges which contains the \`User\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UsersEdge!]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`User\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`User\` edge in the connection.\\"\\"\\"
type UsersEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`User\` at the end of the edge.\\"\\"\\"
  node: User
}

\\"\\"\\"Methods to use when ordering \`User\`.\\"\\"\\"
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  BIO_ASC
  BIO_DESC
  RENAMED_COMPLEX_COLUMN_ASC
  RENAMED_COMPLEX_COLUMN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
"
`;

exports[`allows adding a simple mutation field to PG schema 2`] = `
Object {
  "user1": Object {
    "user": Object {
      "bio": null,
      "email": "testuser1@example.com",
      "id": "[id]",
      "name": "Test User 1",
      "nodeId": "[nodeId]",
    },
  },
  "user2": Object {
    "user": Object {
      "bio": "I have a bio!",
      "email": "testuser2@example.com",
      "id": "[id]",
      "name": "Test User 2",
      "nodeId": "[nodeId]",
    },
  },
}
`;
