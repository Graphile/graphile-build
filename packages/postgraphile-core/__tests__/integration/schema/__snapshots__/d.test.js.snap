// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the default options 1`] = `
"\\"\\"\\"All input for the \`authenticate\` mutation.\\"\\"\\"
input AuthenticateInput {
  a: Int

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"The output of our \`authenticate\` mutation.\\"\\"\\"
type AuthenticatePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  jwtToken: JwtToken

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Person\` mutation.\\"\\"\\"
input CreatePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` to be created by this mutation.\\"\\"\\"
  person: PersonInput!
}

\\"\\"\\"The output of our create \`Person\` mutation.\\"\\"\\"
type CreatePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` that was created by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Post\` mutation.\\"\\"\\"
input CreatePostInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Post\` to be created by this mutation.\\"\\"\\"
  post: PostInput!
}

\\"\\"\\"The output of our create \`Post\` mutation.\\"\\"\\"
type CreatePostPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Person\` that is related to this \`Post\`.\\"\\"\\"
  personByAuthorId: Person

  \\"\\"\\"The \`Post\` that was created by this mutation.\\"\\"\\"
  post: Post

  \\"\\"\\"An edge for our \`Post\`. May be used by Relay 1.\\"\\"\\"
  postEdge(
    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`RenamedTable\` mutation.\\"\\"\\"
input CreateRenamedTableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`RenamedTable\` to be created by this mutation.\\"\\"\\"
  renamedTable: RenamedTableInput!
}

\\"\\"\\"The output of our create \`RenamedTable\` mutation.\\"\\"\\"
type CreateRenamedTablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query

  \\"\\"\\"The \`RenamedTable\` that was created by this mutation.\\"\\"\\"
  renamedTable: RenamedTable

  \\"\\"\\"An edge for our \`RenamedTable\`. May be used by Relay 1.\\"\\"\\"
  renamedTableEdge(
    \\"\\"\\"The method to use when ordering \`RenamedTable\`.\\"\\"\\"
    orderBy: [RenamedTablesOrderBy!] = [NATURAL]
  ): RenamedTablesEdge
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"All input for the \`deletePersonById\` mutation.\\"\\"\\"
input DeletePersonByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deletePerson\` mutation.\\"\\"\\"
input DeletePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Person\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Person\` mutation.\\"\\"\\"
type DeletePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedPersonId: ID

  \\"\\"\\"The \`Person\` that was deleted by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deletePostById\` mutation.\\"\\"\\"
input DeletePostByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deletePost\` mutation.\\"\\"\\"
input DeletePostInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Post\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Post\` mutation.\\"\\"\\"
type DeletePostPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedPostId: ID

  \\"\\"\\"Reads a single \`Person\` that is related to this \`Post\`.\\"\\"\\"
  personByAuthorId: Person

  \\"\\"\\"The \`Post\` that was deleted by this mutation.\\"\\"\\"
  post: Post

  \\"\\"\\"An edge for our \`Post\`. May be used by Relay 1.\\"\\"\\"
  postEdge(
    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

type JwtToken {
  a: Int
  exp: Int
  role: String
}

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  authenticate(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: AuthenticateInput!
  ): AuthenticatePayload

  \\"\\"\\"Creates a single \`Person\`.\\"\\"\\"
  createPerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreatePersonInput!
  ): CreatePersonPayload

  \\"\\"\\"Creates a single \`Post\`.\\"\\"\\"
  createPost(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreatePostInput!
  ): CreatePostPayload

  \\"\\"\\"Creates a single \`RenamedTable\`.\\"\\"\\"
  createRenamedTable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateRenamedTableInput!
  ): CreateRenamedTablePayload

  \\"\\"\\"Deletes a single \`Person\` using its globally unique id.\\"\\"\\"
  deletePerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePersonInput!
  ): DeletePersonPayload

  \\"\\"\\"Deletes a single \`Person\` using a unique key.\\"\\"\\"
  deletePersonById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePersonByIdInput!
  ): DeletePersonPayload

  \\"\\"\\"Deletes a single \`Post\` using its globally unique id.\\"\\"\\"
  deletePost(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePostInput!
  ): DeletePostPayload

  \\"\\"\\"Deletes a single \`Post\` using a unique key.\\"\\"\\"
  deletePostById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePostByIdInput!
  ): DeletePostPayload

  \\"\\"\\"Updates a single \`Person\` using its globally unique id and a patch.\\"\\"\\"
  updatePerson(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  \\"\\"\\"Updates a single \`Person\` using a unique key and a patch.\\"\\"\\"
  updatePersonById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePersonByIdInput!
  ): UpdatePersonPayload

  \\"\\"\\"Updates a single \`Post\` using its globally unique id and a patch.\\"\\"\\"
  updatePost(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePostInput!
  ): UpdatePostPayload

  \\"\\"\\"Updates a single \`Post\` using a unique key and a patch.\\"\\"\\"
  updatePostById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePostByIdInput!
  ): UpdatePostPayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

\\"\\"\\"A connection to a list of \`Person\` values.\\"\\"\\"
type PeopleConnection {
  \\"\\"\\"
  A list of edges which contains the \`Person\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [PeopleEdge!]!

  \\"\\"\\"A list of \`Person\` objects.\\"\\"\\"
  nodes: [Person]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Person\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Person\` edge in the connection.\\"\\"\\"
type PeopleEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Person\` at the end of the edge.\\"\\"\\"
  node: Person
}

\\"\\"\\"Methods to use when ordering \`Person\`.\\"\\"\\"
enum PeopleOrderBy {
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Person implements Node {
  firstName: String
  id: Int!
  lastName: String
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads and enables pagination through a set of \`Post\`.\\"\\"\\"
  posts(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PostCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection!
}

\\"\\"\\"
A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input PersonCondition {
  \\"\\"\\"Checks for equality with the object’s \`firstName\` field.\\"\\"\\"
  firstName: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`lastName\` field.\\"\\"\\"
  lastName: String
}

\\"\\"\\"An input for mutations affecting \`Person\`\\"\\"\\"
input PersonInput {
  firstName: String
  id: Int
  lastName: String
}

\\"\\"\\"
Represents an update to a \`Person\`. Fields that are set will be updated.
\\"\\"\\"
input PersonPatch {
  firstName: String
  id: Int
  lastName: String
}

type Post implements Node {
  authorId: Int
  body: String
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Person\` that is related to this \`Post\`.\\"\\"\\"
  personByAuthorId: Person
}

\\"\\"\\"
A condition to be used against \`Post\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input PostCondition {
  \\"\\"\\"Checks for equality with the object’s \`authorId\` field.\\"\\"\\"
  authorId: Int

  \\"\\"\\"Checks for equality with the object’s \`body\` field.\\"\\"\\"
  body: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

\\"\\"\\"An input for mutations affecting \`Post\`\\"\\"\\"
input PostInput {
  authorId: Int
  body: String
  id: Int
}

\\"\\"\\"
Represents an update to a \`Post\`. Fields that are set will be updated.
\\"\\"\\"
input PostPatch {
  authorId: Int
  body: String
  id: Int
}

\\"\\"\\"A connection to a list of \`Post\` values.\\"\\"\\"
type PostsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Post\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [PostsEdge!]!

  \\"\\"\\"A list of \`Post\` objects.\\"\\"\\"
  nodes: [Post]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Post\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Post\` edge in the connection.\\"\\"\\"
type PostsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Post\` at the end of the edge.\\"\\"\\"
  node: Post
}

\\"\\"\\"Methods to use when ordering \`Post\`.\\"\\"\\"
enum PostsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BODY_ASC
  BODY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Person\`.\\"\\"\\"
  allPeople(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PersonCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Post\`.\\"\\"\\"
  allPosts(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PostCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`RenamedTable\`.\\"\\"\\"
  allRenamedTables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: RenamedTableCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`RenamedTable\`.\\"\\"\\"
    orderBy: [RenamedTablesOrderBy!] = [NATURAL]
  ): RenamedTablesConnection
  findPersonById(id: Int!): Person

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Person\` using its globally unique \`ID\`.\\"\\"\\"
  person(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Person\`.\\"\\"\\"
    nodeId: ID!
  ): Person

  \\"\\"\\"Reads a single \`Post\` using its globally unique \`ID\`.\\"\\"\\"
  post(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Post\`.\\"\\"\\"
    nodeId: ID!
  ): Post
  postById(id: Int!): Post

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
  renamedFunction: Int

  \\"\\"\\"Reads and enables pagination through a set of \`Post\`.\\"\\"\\"
  returnPostsMatching(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
    search: String
  ): PostsConnection!
}

type RenamedTable {
  colA: Int
}

\\"\\"\\"
A condition to be used against \`RenamedTable\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input RenamedTableCondition {
  \\"\\"\\"Checks for equality with the object’s \`colA\` field.\\"\\"\\"
  colA: Int
}

\\"\\"\\"An input for mutations affecting \`RenamedTable\`\\"\\"\\"
input RenamedTableInput {
  colA: Int
}

\\"\\"\\"A connection to a list of \`RenamedTable\` values.\\"\\"\\"
type RenamedTablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`RenamedTable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [RenamedTablesEdge!]!

  \\"\\"\\"A list of \`RenamedTable\` objects.\\"\\"\\"
  nodes: [RenamedTable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`RenamedTable\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`RenamedTable\` edge in the connection.\\"\\"\\"
type RenamedTablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`RenamedTable\` at the end of the edge.\\"\\"\\"
  node: RenamedTable
}

\\"\\"\\"Methods to use when ordering \`RenamedTable\`.\\"\\"\\"
enum RenamedTablesOrderBy {
  COL_A_ASC
  COL_A_DESC
  NATURAL
}

\\"\\"\\"All input for the \`updatePersonById\` mutation.\\"\\"\\"
input UpdatePersonByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Person\` being updated.
  \\"\\"\\"
  personPatch: PersonPatch!
}

\\"\\"\\"All input for the \`updatePerson\` mutation.\\"\\"\\"
input UpdatePersonInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Person\` to be updated.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Person\` being updated.
  \\"\\"\\"
  personPatch: PersonPatch!
}

\\"\\"\\"The output of our update \`Person\` mutation.\\"\\"\\"
type UpdatePersonPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Person\` that was updated by this mutation.\\"\\"\\"
  person: Person

  \\"\\"\\"An edge for our \`Person\`. May be used by Relay 1.\\"\\"\\"
  personEdge(
    \\"\\"\\"The method to use when ordering \`Person\`.\\"\\"\\"
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updatePostById\` mutation.\\"\\"\\"
input UpdatePostByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Post\` being updated.
  \\"\\"\\"
  postPatch: PostPatch!
}

\\"\\"\\"All input for the \`updatePost\` mutation.\\"\\"\\"
input UpdatePostInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Post\` to be updated.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Post\` being updated.
  \\"\\"\\"
  postPatch: PostPatch!
}

\\"\\"\\"The output of our update \`Post\` mutation.\\"\\"\\"
type UpdatePostPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Person\` that is related to this \`Post\`.\\"\\"\\"
  personByAuthorId: Person

  \\"\\"\\"The \`Post\` that was updated by this mutation.\\"\\"\\"
  post: Post

  \\"\\"\\"An edge for our \`Post\`. May be used by Relay 1.\\"\\"\\"
  postEdge(
    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}
"
`;
